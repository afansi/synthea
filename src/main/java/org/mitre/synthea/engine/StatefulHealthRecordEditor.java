package org.mitre.synthea.engine;

import java.util.HashMap;
import java.util.Map;
import org.mitre.synthea.world.agents.Person;

/**
 * Stateful base class for HealthRecordEditor implementations.
 * Manages per-thread context so the same HealthRecordEditor instance can
 * be used with multiple Synthea generator threads. The getOrInitContextFor
 * method can be used to automatically handle when the patient changes if
 * per-patient context is desired. Note that this class assumes that single
 * person record will be generated by a single thread (as was the case at the
 * time of authoring).
 * @author mhadley
 */
public abstract class StatefulHealthRecordEditor implements HealthRecordEditor {
  
  private final ThreadLocal<Map<String, Object>> contextHolder;
  private final ThreadLocal<Integer> currentPersonHolder;
  
  protected StatefulHealthRecordEditor() {
    contextHolder = new ThreadLocal<>();
    currentPersonHolder = new ThreadLocal<>();
  }
  
  protected Map<String, Object> getContext() {
    if (contextHolder.get() == null) {
      contextHolder.set(new HashMap<>());
    }
    return contextHolder.get();
  }
  
  /**
   * Return an empty context if the Person is different from the last time this
   * method was invoked, otherwise return the current context.
   * @param p
   * @return the context
   */
  protected Map<String, Object> getOrInitContextFor(Person p) {
    if (isNewPerson(p)) {
      currentPersonHolder.set(p.hashCode());
      clearContext();
    }
    return getContext();
  }
  
  /**
   * Determine whether the supplied Person is the same as that passed to the
   * last invocation of getOrInitContextFor.
   */
  protected boolean isNewPerson(Person p) {
    if (currentPersonHolder.get() == null) {
      return true;
    }
    return p.hashCode() != currentPersonHolder.get();
  }
  
  protected void clearContext() {
    getContext().clear();
  }
}
